@using Blazor.FileReader
@using Clients.Shared
@using WebInterface.Services
@page "/"
@inject IFileReaderService FileReaderService
@inject IPillWarningService PillWarningService

<div class="row">
    <input type="file" accept="image/*" id="fileUpload" @ref="_fileUpload" @oninput="UploadFile" />
</div>
<div class="row">
    <div class="col">
        @if (_hasFirstInput && _result != null)
        {
            if (_result.IsPill < Likeliness.Very)
            {
                <div style="word-wrap: break-word">Ooops hier hat wohl was nicht geklappt. Wir glauben nicht dass hochgeladene Bild eine Pille ist</div>
            }
            else
            {
                foreach (var resultTagFinding in _result.TagFindings)
                {
                    <h3>@ConvertLikeliness(resultTagFinding.Likeliness)</h3>
                    <p>Name: @resultTagFinding.TagName</p>
                    <div class="d-flex flex-wrap">
                        @foreach (var warning in resultTagFinding.PillWarnings)
                        {
                            <div>
                                <div class="pill-image">
                                    <Image Content="warning.Image" OnClickCallback="@(e => _selectedWarning = warning)"></Image>
                                </div>
                            </div>
                        }
                    </div>
                }
                <h3>Pillen mit gleicher Farbe</h3>
                <div class="d-flex flex-wrap">
                    @foreach (var warning in _result.ColorFindings)
                    {
                        <div>
                            <div class="pill-image">
                                <Image Content="warning.Image" OnClickCallback="@(e => _selectedWarning = warning)"></Image>
                            </div>
                        </div>
                    }
                </div>
            }
        }
    </div>
    @if (_selectedWarning != null)
    {
        <div class="col">
            <PillWarningDisplay PillWarning="_selectedWarning"></PillWarningDisplay>
        </div>
    }
</div>


@code{

#pragma warning disable 649 //This field is used as ref
    ElementReference _fileUpload;
#pragma warning restore 649

    bool _hasFirstInput;
    PredictionResult _result;
    PillWarning _selectedWarning;

    async Task UploadFile(ChangeEventArgs e)
    {
        var file = (await FileReaderService.CreateReference(_fileUpload).EnumerateFilesAsync()).First();
        var content = await file.CreateMemoryStreamAsync(4096);

        _hasFirstInput = true;
        _result = await PillWarningService.GetPillWarnings(content);
    }

    private string ConvertLikeliness(Likeliness likeliness)
    {
        switch (likeliness)
        {
            case Likeliness.Maybe:
                return "Eher unwahrscheinlich aber könnte sein das es diese Pillen sind";
            case Likeliness.Very:
                return "Gut möglich dass es diese Pillen sind";
            case Likeliness.Sure:
                return "Sehr gut möglich dass es diese Pillen sind";
            default:
                throw new ArgumentOutOfRangeException(nameof(likeliness), likeliness, null);
        }
    }
}